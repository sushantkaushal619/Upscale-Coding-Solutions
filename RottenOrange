package test;



import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Coordinate {
  int x; 
  int y; 
  
  public Coordinate(int x, int y) {
    this.x = x;
    this.y = y;
  }
}

public class MatrixApp
{
  public int timeToRotOranges(int[][] mat,int ROW,int COL) {
    Queue<Coordinate> q = new LinkedList<>();
    
    for(int i = 0; i < ROW; i++) {
      for(int j = 0; j < COL; j++) {
        if(mat[i][j] == 2) {
          q.add(new Coordinate(i, j));
        }
      }
    }
    
    q.add(new Coordinate(-1, -1));
    
    int count = 0;
    boolean flag = false;
    
    while(!q.isEmpty()) {
      
      while(!ifPeekDelimeter(q.peek())) {
        Coordinate element = q.remove();
        
        if(isFreshOrange(mat, element.x - 1, element.y,ROW,COL)) {
          mat[element.x - 1][element.y] = 2;
          q.add(new Coordinate(element.x - 1, element.y));
          
          if(!flag) {
            flag = true;
            count++;
          }
        }
        
        if(isFreshOrange(mat, element.x, element.y + 1,ROW,COL)) {
          mat[element.x][element.y + 1] = 2;
          q.add(new Coordinate(element.x, element.y + 1));
          
          if(!flag) {
            flag = true;
            count++;
          }
        }
        
        if(isFreshOrange(mat, element.x + 1, element.y,ROW,COL)) {
          mat[element.x + 1][element.y] = 2;
          q.add(new Coordinate(element.x + 1, element.y));
          if(!flag) {
            flag = true;
            count++;
          }
        }
        
        if(isFreshOrange(mat, element.x, element.y - 1,ROW,COL)) {
          mat[element.x][element.y - 1] = 2;
          q.add(new Coordinate(element.x, element.y - 1));
          if(!flag) {
            flag = true;
            count++;
          }
        }
      }
      
      q.remove();
      flag = false;
      
      if(!q.isEmpty()) {
        q.add(new Coordinate(-1, -1));
      }
    }
    
    return  count;
    
  }
  
  public boolean ifPeekDelimeter(Coordinate c) {
    return c.x == -1 && c.y == -1;
  }
  
  public boolean isFreshOrange(int[][] mat, int x, int y,int ROW,int COL) {
    return x >= 0 && x < ROW
        && y >= 0 && y < COL
        && mat[x][y] == 1; 
  }
  
  public boolean ifAnyFreshOrangesLeft(int[][] mat,int ROW,int COL) {
    for(int i = 0; i < ROW; i++) {
      for(int j = 0; j < COL; j++) {
        if(mat[i][j] == 1) {
          return true; 
        }
      }
    }
    
    return false;
  }
  public int checkTypeOfOrange(int mat[][],int ROW,int COL,int type)
  {
	  int res=0;
	  for(int i=0;i<ROW;i++)
	     {
	    	 for(int j=0;j<COL;j++)
	    	 {
	    		 if(mat[i][j]==type)
	    		 {
	    			 res++;
	    		 }
	    	 }
	     }
	  return res;
  }

  public static void main(String[] args) 
  {
     MatrixApp a = new MatrixApp();
     int ROW,COL;
     
     Scanner in=new Scanner(System.in);
     System.out.println("Enter the number of ROWS");
     ROW=in.nextInt();
     System.out.println("Enter the number of COLOUMS");
     COL=in.nextInt();
     int mat[][]=new int[ROW][COL];
     System.out.println("Enter the matrix");
     for(int i=0;i<ROW;i++)
     {
    	 for(int j=0;j<COL;j++)
    	 {
    		 mat[i][j]=in.nextInt();
    	 }
     }
    System.out.println("time frames: "+a.timeToRotOranges(mat,ROW,COL));
    System.out.println("Fresh Oranges: "+a.checkTypeOfOrange(mat,ROW,COL,1));
    System.out.println("Rotten Oranges: "+a.checkTypeOfOrange(mat,ROW,COL,2));
  }
}
